// Generated by gencpp from file battery_msgs/Battery_SrvRequest.msg
// DO NOT EDIT!


#ifndef BATTERY_MSGS_MESSAGE_BATTERY_SRVREQUEST_H
#define BATTERY_MSGS_MESSAGE_BATTERY_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace battery_msgs
{
template <class ContainerAllocator>
struct Battery_SrvRequest_
{
  typedef Battery_SrvRequest_<ContainerAllocator> Type;

  Battery_SrvRequest_()
    : led_number(0)
    , state(0)  {
    }
  Battery_SrvRequest_(const ContainerAllocator& _alloc)
    : led_number(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef int64_t _led_number_type;
  _led_number_type led_number;

   typedef int64_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Battery_SrvRequest_

typedef ::battery_msgs::Battery_SrvRequest_<std::allocator<void> > Battery_SrvRequest;

typedef boost::shared_ptr< ::battery_msgs::Battery_SrvRequest > Battery_SrvRequestPtr;
typedef boost::shared_ptr< ::battery_msgs::Battery_SrvRequest const> Battery_SrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator1> & lhs, const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.led_number == rhs.led_number &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator1> & lhs, const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace battery_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "279825f363a2b5cf6c217db8f57892e9";
  }

  static const char* value(const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x279825f363a2b5cfULL;
  static const uint64_t static_value2 = 0x6c217db8f57892e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "battery_msgs/Battery_SrvRequest";
  }

  static const char* value(const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 led_number\n"
"int64 state\n"
;
  }

  static const char* value(const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.led_number);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Battery_SrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::battery_msgs::Battery_SrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::battery_msgs::Battery_SrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "led_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.led_number);
    s << indent << "state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BATTERY_MSGS_MESSAGE_BATTERY_SRVREQUEST_H
